-- 構文解析プラグイン
return {
  {
    "nvim-treesitter/nvim-treesitter",
    event = "VeryLazy",
    build = ":TSUpdate",
    priority = 1001,
    dependencies = {
      -- 対応するキーワードや記号にジャンプできる
      { "andymass/vim-matchup" },
      { "RRethy/nvim-treesitter-textsubjects" },
    },
    config = function()
      require("nvim-treesitter.configs").setup({
        ensure_installed = {
          "bash",
          "c",
          "c_sharp",
          "cpp",
          "css",
          "csv",
          "dart",
          "diff",
          "dockerfile",
          "dot",
          "elixir",
          "elm",
          "erlang",
          "git_config",
          "git_rebase",
          "gitcommit",
          "gitignore",
          "go",
          "gomod",
          "gosum",
          "graphql",
          "haskell",
          "html",
          "htmldjango",
          "ini",
          "java",
          "javascript",
          "julia",
          "kotlin",
          "lua",
          "markdown",
          "markdown_inline",
          "mermaid",
          "ocaml",
          "perl",
          "php",
          "python",
          "regex",
          "requirements",
          "rst",
          "ruby",
          "rust",
          "scala",
          "scheme",
          "sql",
          "svelte",
          "swift",
          "terraform",
          "tsx",
          "toml",
          "typescript",
          "vim",
          "vimdoc",
          "vue",
          "xml",
          "yaml",
          "zig",
        },
        auto_install = true,
        sync_install = false,
        ignore_install = {
          "ada",
          "agda",
          "arduino",
          "astro",
          "awk",
          "beancount",
          "bibtex",
          "bicep",
          "bitbake",
          "blueprint",
          "cairo",
          "capnp",
          "chatito",
          "cuda",
          "cue",
          "d",
          "devicetree",
          "dhall",
          "doxygen",
          "dtd",
          "ebnf",
          "eds",
          "eex",
          "elsa",
          "elvish",
          "embedded_template",
          "fennel",
          "firrtl",
          "fish",
          "foam",
          "forth",
          "fortran",
          "fsh",
          "func",
          "fusion",
          "gdscript",
          "gitattributes",
          "gleam",
          "glimmer",
          "glsl",
          "godot_resource",
          "gowork",
          "gpg",
          "groovy",
          "hare",
          "haskell_persistent",
          "hcl",
          "heex",
          "hoon",
          "http",
          "hurl",
          "ispc",
          "janet_simple",
          "jsdoc",
          "json5",
          "jsonc",
          "jsonnet",
          "kconfig",
          "kdl",
          "lalrpop",
          "latex",
          "ledger",
          "llvm",
          "luadoc",
          "luau",
          "m68k",
          "make",
          "markdown_inline",
          "matlab",
          "menhir",
          "meson",
          "mlir",
          "nickel",
          "ninja",
          "nix",
          "norg",
          "nqc",
          "objc",
          "ocaml_interface",
          "ocamllex",
          "odin",
          "org",
          "pascal",
          "passwd",
          "pem",
          "phpdoc",
          "pioasm",
          "po",
          "poe_filter",
          "pony",
          "prisma",
          "promql",
          "proto",
          "prql",
          "psv",
          "pug",
          "puppet",
          "pymanifest",
          "ql",
          "qmldir",
          "qmljs",
          "query",
          "r",
          "racket",
          "rasi",
          "re2c",
          "rego",
          "rnoweb",
          "robot",
          "ron",
          "scfg",
          "scss",
          "slint",
          "smali",
          "smithy",
          "snakemake",
          "solidity",
          "soql",
          "sosl",
          "sparql",
          "squirrel",
          "ssh_config",
          "starlark",
          "strace",
          "supercollider",
          "surface",
          "sxhkdrc",
          "systemtap",
          "t32",
          "tablegen",
          "teal",
          "textproto",
          "thrift",
          "tiger",
          "tlaplus",
          "todotxt",
          "tsv",
          "twig",
          "ungrammar",
          "unison",
          "usd",
          "uxntal",
          "v",
          "vala",
          "verilog",
          "vhs",
          "wgsl",
          "wgsl_bevy",
          "wing",
          "yang",
          "yuck",
          "zig",
        },
        highlight = {
          enable = true,
          disable = function(_, buf)
            local max_filesize = 100 * 1024 -- 100 KB
            local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
            if ok and stats and stats.size > max_filesize then
              return true
            end
          end,
        },
        indent = {
          enable = true, --言語に応じた自動インデント
          --disable = { "html" }, --htmlだけ自動インデントしない
        },
        autotag = {
          enable = true,
        },
        matchup = {
          enable = true,
        },
        textsubjects = {
          enable = true,
          perv_section = ",",
          keymaps = {
            ["."] = {
              "textsubjects-smart",
              desc = "コメント, 関数呼び出し, 関数定義などスマートに選択",
            },
            [";"] = { "textsubjects-container-outer", desc = "クラス, 構造体, 関数を外側から選択" },
            ["i;"] = { "textsubjects-container-inner", desc = "クラス, 構造体, 関数の内部を選択" },
          },
        },
      })
      local ts_update = require("nvim-treesitter.install").update({ with_sync = true })
      ts_update()
    end,
  },
  -- 画面に収まりきらない関数名を上部に表示するプラグイン
  {
    "nvim-treesitter/nvim-treesitter-context",
    lazy = true,
    event = "BufRead",
    config = function()
      require("treesitter-context").setup({
        enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
        max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
        min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
        line_numbers = true,
        multiline_threshold = 20, -- Maximum number of lines to show for a single context
        trim_scope = "outer", -- Which context lines to discard if `max_lines` is exceeded. Choices: "inner", "outer"
        mode = "cursor", -- Line used to calculate context. Choices: "cursor", "topline"
        -- Separator between context and content. Should be a single character string, like "-".
        -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
        separator = nil,
        zindex = 20, -- The Z-index of the context window
        on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
      })
    end,
  },
}
